import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.github.spotbugs.SpotBugsTask

plugins {
    id 'java'
    id 'jacoco'

    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'com.diffplug.gradle.spotless' version '3.16.0'
    id 'com.github.spotbugs' version '1.6.5'
    id 'com.bmuschko.docker-remote-api' version '4.0.4'
    id 'com.github.ben-manes.versions' version '0.20.0'
}

dependencies {
    compileOnly 'org.apache.flink:flink-java:1.6.2'
    compileOnly 'org.apache.flink:flink-streaming-java_2.11:1.6.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.apache.flink:flink-test-utils_2.11:1.6.2'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.23.0'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testRuntimeOnly 'org.slf4j:slf4j-nop:1.7.25'
}

configurations {
    testImplementation.extendsFrom compileOnly
}

repositories {
    jcenter()
}

version '0.1-SNAPSHOT'

test {
    useJUnitPlatform()
}

task createDockerfile(type: Dockerfile) {
    dependsOn shadowJar
    destFile = project.file('build/Dockerfile')
    from 'flink:1.6.2-alpine'
    addFile("libs/${shadowJar.archiveName}", '$FLINK_HOME/lib/')
    addFile('bin/docker-entrypoint.sh', '/')
    runCommand('echo $\'metrics.reporters: prom\\nmetrics.reporter.prom.class: org.apache.flink.metrics.prometheus.PrometheusReporter\' >> "$FLINK_HOME/conf/flink-conf.yaml"')
    runCommand('mv $FLINK_HOME/opt/flink-metrics-prometheus-1.6.2.jar $FLINK_HOME/lib')
}

task copyScripts(type: Copy) {
    from "${rootDir}/src/main/bin"
    into "${buildDir}/bin"
}

task buildImage(type: DockerBuildImage) {
    dependsOn copyScripts
    dependsOn createDockerfile
    inputDir = project.layout.buildDirectory
    tags.add("${project.name}:${project.version}")
}

spotless {
    java {
        googleJavaFormat()
    }
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport
